# application.yml
---
spring:
  application:
    name: connessioni

  cloud:
    consul:
      host: consul
      port: 8500
      discovery:
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # Configurazione per effettuare esperimenti, NON USARE IN PRODUZIONE
        # Dopo quanto tempo Consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # Consul deve restituire solo servizi che passano l'health check (default=false)
        queryPassing: true
    loadbalancer:
      ribbon.enabled: false

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://connessioni-db:5432/connessionidb
    username: postgres
    password: postgres

  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
      jdbc:
        lob:
          non_contextual_creation: true
    open-in-view: false
    show-sql: false

  kafka:
    bootstrap-servers: kafka.kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      batch-size: 0

server:
  port: ${PORT:${SERVER_PORT:0}}
  # Se necessario, puoi fissare una porta (es. 8080)
  # port: 8080
  # Per Swagger, se dietro a un API Gateway
  forward-headers-strategy: framework

logging:
  level:
    org:
      springframework:
        orm:
          jpa: INFO
      hibernate:
        SQL: INFO
    asw:
      recensioni: DEBUG

# MESSAGING
asw:
  kafka:
    producer:
      name: Producer
    channel:
      out: connessioni
    # groupid: simple-producer